x-env: &base-env
  env_file:
    - ../envs/base.env
  environment:
    - PYTHONDONTWRITEBYTECODE=1
    - POSTGRES_HOST=postgres
    - REDIS_HOST=redis
    - RMQ_HOST=rabbitmq

x-base-python: &base-python
  build:
    context: ../
    dockerfile: docker/custom_python/Dockerfile
  <<: *base-env
  volumes:  # TODO: со временем, возможно, придется что-то добавлять/изменять, либо использовать `- .:/code`
    - ../alembic:/code/alembic
    - ../alembic.ini:/code/alembic.ini
    - ../app:/code/app
    - ../docker:/code/docker
    - ../manage.py:/code/manage.py
    - ../envs:/code/envs
    - ../static:/code/static
    - ../scripts:/code/scripts

services:
  postgres:
    image: postgres:${POSTGRES_VERSION}
    container_name: postgres
    tty: true  # TODO: разобраться
    volumes:
      - postgresql_data:/var/lib/postgresql/data
    <<: *base-env
    ports:
      - 5432:${POSTGRES_PORT}

  redis:
    image: redis:${REDIS_VERSION}
    container_name: redis
    restart: unless-stopped
    <<: *base-env
    ports:
      - 6379:${REDIS_PORT}
    command: sh -c '
        mkdir -p /usr/local/etc/redis &&
        echo "user default off" > /usr/local/etc/redis/users.acl &&
        echo "user $REDIS_USER on allkeys allchannels allcommands >$REDIS_PASSWORD ~* +@all" >> /usr/local/etc/redis/users.acl &&
        redis-server --bind 0.0.0.0 --aclfile /usr/local/etc/redis/users.acl
      '
#    TODO: разобрать
#    volumes:
#      - ./redisdata:/data
#    deploy:
#      resources:
#        limits:
#          cpus: '0.50'
#          memory: 512M
#        reservations:
#          cpus: '0.25'
#          memory: 256M
#    healthcheck:
#      test: [ "CMD", "redis-cli", "-a", "$REDIS_DEFAULT_PASSWORD", "ping" ]
#      interval: 30s
#      timeout: 10s
#      retries: 5
#    tty: true
#    stdin_open: true

  prometheus:
    image: prom/prometheus:${PROMETHEUS_VERSION}
    container_name: prometheus
    volumes:
      - ../monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
      - prometheus_config:/etc/prometheus
    restart: unless-stopped
    ports:
      - 9090:${PROMETHEUS_PORT}

  grafana:
    image: grafana/grafana:${GRAFANA_VERSION}
    container_name: grafana
    restart: unless-stopped
    <<: *base-env
    ports:
      - 3000:${GRAFANA_PORT}
    volumes:
      - grafana_data:/var/lib/grafana
      - grafana_config:/etc/grafana
    depends_on:
      - prometheus

  rabbitmq:
    image: rabbitmq:${RMQ_VERSION}
    container_name: rabbitmq
    restart: unless-stopped
    <<: *base-env
    ports:
      - 5672:${RMQ_PORT}
      - 15672:${RMQ_GUI_PORT}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:15672" ]
      interval: 30s
      timeout: 10s
      retries: 5

  celery-worker:
    container_name: celery-worker
    <<: *base-python
    command: ["/code/docker/custom_python/celery.sh", "worker"]

  celery-flower:
    container_name: celery-flower
    <<: *base-python
    ports:
      - 5555:${FLOWER_PORT}
    command: ["/code/docker/custom_python/celery.sh", "flower", "${FLOWER_PORT}"]

  history-consumer:
    container_name: history-consumer
    restart: on-failure:5
    <<: *base-python
    command: ["/code/docker/custom_python/history.sh"]
    depends_on:
      - postgres
      - rabbitmq

  api:
    container_name: api
    restart: on-failure:5
    <<: *base-python
    ports:
      - 8000:${API_PORT}
    command: ["/code/docker/custom_python/api.sh"]
    depends_on:
      - rabbitmq
      - history-consumer
      - celery-worker
      - celery-flower
      - postgres
      - redis

  frontend:
    container_name: frontend
    build:
      context: ../
      dockerfile: docker/custom_node/Dockerfile
    <<: *base-env  # Енвы пока не используются во фронтенде
    ports:
      - 80:3000
    volumes:
      - ../frontend/src:/app/src
      - ../frontend/public:/app/public
    depends_on:
      - api
    command: npm start
    stdin_open: true  # TODO: Разобраться:
    tty: true  # TODO: Разобраться:


volumes:
  postgresql_data:
  grafana_data:
  grafana_config:
  prometheus_data:
  prometheus_config:
  rabbitmq_data:
